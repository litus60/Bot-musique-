import os
import logging
import discord
from discord.ext import commands
from config import TOKEN
from music import MusicSlash
from control_panel import ControlPanel
from logging_config import logger

# Configuration des intents
intents = discord.Intents.default()
intents.messages = True
intents.guilds = True
intents.voice_states = True
intents.message_content = True

# Cr√©ation du bot
bot = commands.Bot(command_prefix="!", intents=intents)

async def load_cogs():
    """Charge les cogs de mani√®re asynchrone."""
    try:
        await bot.add_cog(MusicSlash(bot))
        await bot.add_cog(ControlPanel(bot))
        logger.info("‚úÖ Cogs charg√©s avec succ√®s.")
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du chargement des cogs : {e}")

# Gestion des √©v√©nements
@bot.event
async def on_ready():
    """√âv√©nement d√©clench√© lorsque le bot est pr√™t."""
    await load_cogs()
    try:
        synced = await bot.tree.sync()
        logger.info(f"‚úÖ {len(synced)} commandes synchronis√©es : {[cmd.name for cmd in synced]}")
    except Exception as e:
        logger.error(f"‚ùå Erreur de synchronisation des commandes : {e}")
    logger.info(f"‚úÖ Bot pr√™t en tant que {bot.user} (ID : {bot.user.id})")

@bot.event
async def on_disconnect():
    """Log la d√©connexion du bot."""
    logger.warning("‚ö†Ô∏è Bot d√©connect√©. V√©rifiez votre connexion ou h√©bergeur.")

@bot.event
async def on_resumed():
    """Log la reconnexion du bot."""
    logger.info("‚úÖ Bot reconnect√© avec succ√®s.")

@bot.event
async def on_voice_state_update(member, before, after):
    """Supprime les fichiers musicaux lorsque le bot quitte un canal vocal."""
    if member == bot.user and before.channel and not after.channel:
        logger.info("üîä Le bot a quitt√© un salon vocal. Nettoyage des fichiers musicaux...")
        music_dir = "music"
        if os.path.exists(music_dir):
            for file in os.listdir(music_dir):
                try:
                    os.remove(os.path.join(music_dir, file))
                    logger.info(f"‚úÖ Fichier supprim√© : {file}")
                except Exception as e:
                    logger.error(f"‚ùå Erreur lors de la suppression de {file}: {e}")
        else:
            logger.warning("‚ö†Ô∏è Dossier 'music' introuvable.")

# Commandes Slash
@bot.tree.command(name="ping", description="Affiche la latence du bot.")
async def ping(interaction: discord.Interaction):
    latency = round(bot.latency * 1000)
    await interaction.response.send_message(f"üèì Pong! Latence : {latency} ms")
    logger.info(f"Commande /ping utilis√©e. Latence : {latency} ms")

@bot.tree.command(name="sync", description="Force la synchronisation des commandes slash.")
async def sync(interaction: discord.Interaction):
    if interaction.user.guild_permissions.administrator:
        try:
            synced = await bot.tree.sync()
            await interaction.response.send_message(f"‚úÖ {len(synced)} commandes synchronis√©es.", ephemeral=True)
            logger.info("‚úÖ Synchronisation manuelle r√©ussie.")
        except Exception as e:
            await interaction.response.send_message(f"‚ùå Erreur de synchronisation : {e}", ephemeral=True)
            logger.error(f"‚ùå Erreur de synchronisation manuelle : {e}")
    else:
        await interaction.response.send_message("‚ùå Vous n'avez pas les permissions requises.", ephemeral=True)

@bot.tree.command(name="debug", description="Effectue un test pour v√©rifier que le bot fonctionne.")
async def debug(interaction: discord.Interaction):
    try:
        await interaction.response.send_message("‚úÖ Debug r√©ussi. Tout fonctionne correctement !")
        logger.info("Commande /debug ex√©cut√©e avec succ√®s.")
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'ex√©cution de /debug : {e}")
        await interaction.response.send_message(f"‚ùå Une erreur s'est produite : {e}")

@bot.event
async def on_command_error(ctx, error):
    """Gestion des erreurs de commandes."""
    logger.error(f"‚ùå Erreur d√©tect√©e : {error}")
    await ctx.send(f"‚ùå Une erreur est survenue : {error}")

# D√©marrage avec relance automatique en cas d'erreur
if __name__ == "__main__":
    import asyncio

    async def main():
        """Lance le bot et relance en cas de crash."""
        while True:
            try:
                logger.info("üöÄ D√©marrage du bot...")
                async with bot:
                    await bot.start(TOKEN)
            except Exception as e:
                logger.error(f"‚ùå Crash du bot : {e}")
                logger.info("üîÑ Red√©marrage dans 5 secondes...")
                await asyncio.sleep(5)

    asyncio.run(main())
